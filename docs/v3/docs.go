// Package v3 GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package v3

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "TODO",
        "contact": {
            "name": "7TV Developers",
            "url": "https://discord.gg/7tv",
            "email": "dev@7tv.io"
        },
        "license": {
            "name": "Apache 2.0 + Commons Clause",
            "url": "https://github.com/SevenTV/REST/blob/dev/LICENSE.md"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/emotes": {
            "get": {
                "description": "Search for emotes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emotes"
                ],
                "summary": "Search Emotes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search by emote name / tags",
                        "name": "query",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Emote"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Upload a new emote",
                "consumes": [
                    "image/webp",
                    " image/gif",
                    " image/png",
                    " image/apng",
                    " image/avif",
                    " image/jpeg",
                    " image/tiff",
                    " image/webm"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emotes"
                ],
                "summary": "Create Emote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Initial emote properties",
                        "name": "X-Emote-Data",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Emote"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CosmeticBadge": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "misc": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "tooltip": {
                    "type": "string"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.CosmeticPaint": {
            "type": "object",
            "properties": {
                "angle": {
                    "type": "integer"
                },
                "color": {
                    "type": "integer"
                },
                "drop_shadows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CosmeticPaintDropShadow"
                    }
                },
                "function": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "repeat": {
                    "type": "boolean"
                },
                "shape": {
                    "type": "string"
                },
                "stops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CosmeticPaintGradientStop"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.CosmeticPaintDropShadow": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "integer"
                },
                "radius": {
                    "type": "number"
                },
                "x_offset": {
                    "type": "number"
                },
                "y_offset": {
                    "type": "number"
                }
            }
        },
        "model.CosmeticPaintGradientStop": {
            "type": "object",
            "properties": {
                "at": {
                    "type": "number"
                },
                "color": {
                    "type": "integer"
                }
            }
        },
        "model.CosmeticsMap": {
            "type": "object",
            "properties": {
                "badges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CosmeticBadge"
                    }
                },
                "paints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CosmeticPaint"
                    }
                }
            }
        },
        "model.Emote": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The emote's ID",
                    "type": "string"
                },
                "name": {
                    "description": "The emote's name",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "3.0",
	Host:        "7tv.io",
	BasePath:    "/v3",
	Schemes:     []string{"https"},
	Title:       "7TV REST API",
	Description: "This is the REST API for 7TV",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
